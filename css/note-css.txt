<!-- 62. Color & Background Color -->
Color = to change text Color.
Background Color = to change background Color.

There are Background and Background-color, both can change background color, but Background-color more spesific.

<!-- 63. Color Systems -->
How to get colors:
1. Named colors : Easy, but limited. There are 140 named colors.
2. RGB (Red, Green, Blue): Syntax = (R, G, B), range of the color is 0-255.
    Example :
    (255, 0, 0) = Red.
    (255, 0, 255) = Purple. (Red + Blue).
    (255, 255, 0) = Yellow. (Red + Green).
    (0, 0, 0) = Black.
* Light colors = max the colors.
* Darker colors = min / lower the colors. 
3. Hex (Hexadecimal): Syntax = #ff(Red)ff(Green)ff(Blue). ff = 255, so it can be read like RGB syntax.

<!-- 66. Common Text Properties -->
1. Text-align : Align all text to the destined positions.
2. Font-weight : Make text bolder or lighter, depends the value.
3. Text-decoration : Give text decoration, like underline, bullets, etc.
4. line-height : Give amount value of height for each sentence.
5. letter-spacing : Give amount value of spacing for each character.

<!-- 70,71,72,73. (Selectors) -->
Syntax and description in selector file.

<!-- 79. Specificity -->
ID > Class > Pseudo Elements / Classes.
1 ID > 5 Class > 20 Pseudo Elements / Classes.

<!-- 82. Inheritance -->
if the elements didnt have any spesificity then it will inherit.
* Not all attribute can be inherited.

<!-- 84. Box Model, Width and Height -->
In the webpage, every elements treated like an object.

<!-- 84. Box Model, Border & Border Radius -->
If you add border it will expand the size of the elements.

box-sizing : border-box; for making the elements size become the actual size even there are border.

<!-- 85. Box Model, Padding -->
Shorthand for padding :
- Applying for all four sides : padding: 10px
- vertical | horizontal : padding : 40px 10px
- top | horizontal | bottom : 10px 20px 10px
- top | right | bottom | left : 5px 0 20px 10px

<!-- 85. Box Model, Margin -->
Shorthand for margin :
- Applying for all four sides : padding: 10px
- vertical | horizontal : padding : 40px 10px
- top | horizontal | bottom : 10px 20px 10px
- top | right | bottom | left : 5px 0 20px 10px

<!-- 85. Box Model, Display -->
Type of display :
1. Inline: The element will fit with the other elements.
* if the element inline, the width and height is ignored.
* if padding was added, the padding will not be respected by the other elements.
2. Block: The element will take a new line and fill all the line.
3. Inline-block: The element will act like inline but weight and height will be respected.
4. None

<!-- 85. CSS Units -->
Relative units :
1. Percentage : this css units is really helpfull because the units can measure the parent size or the size of its elements.
2. Em's : this css units relativly following the size of the parent font size. But it can be applied to another style.
* 1 Em's equals the font size of the parents. 2 Em's equals to twice of the font size of the parent.
* for nesting it will be a snowball effect.
3. Rem's (Root Em's): this css units relativly following the size of the root html elements.
* if root font-size 20 px, then 1 Rem's is 20px, and 2 Rem's is 40px, etc.

<!-- 93. Opacity & Alpha Channel-->
Alpha channel is responsible for the opacity of the elements color.
* Example : rgba(r,g,b,a); a range = 0 > 1
Opacity is responsible of the opacity of all the elements.

<!-- 94. CSS Positions -->
1. Static = The position will be static / stay. (Normal flow)
2. Relative = The position relative to itself based on the value of the top / bottom / left/ right.(Normal flow)
3. Absolute = The position relative to the closest positioned ancestor. (Not a normal flow)
4. Fixed = This position will not changing following of the viewport. (Not a normal flow)
5. Sticky = This position will stick the element to its nearest ancestors that has scrolling mechanism.

<!-- 95. CSS Transitions -->
Syntax = Property Name | Duration | Timing Function | Delay.

<!-- 96. CSS Transform-->
There are 4 types of transformation :
1. scale(), syntax = scale(x,y); Scale is for transform the size of the elements.
2. translate(), syntax = translate(x,y); Translate is to move the elements.
3. rotate(), syntax = rotate(a); Rotate is for rotating elements.
4. skew(), syntax = skew(x,y); Skew is for skewing elements.

<!-- 98. CSS Background-->
background-image; to set a background with an image.
background-size: cover = make the image as large/small as possible without streching the picture but crop if needed.
                 contain = make the image as large/small as possible without streching or cropping the picture.
background-repeat; to control the repeating background-image;
background-position; to control the part position of the background.

The background code can be shorthanded by putting all the attribute in the "background:" but only for background size and position, it have to be written with slash / "/", Example : center/cover.
We can apply background more than one; just put "," in the syntax and add the url of the background.

<!-- FLEXBOX SESSION IMPORTANT! -->

<!-- 103. Flexbox -->
Flexbox is one-dimensional layout method for laying out items in a rows or columns. Items flex to fill additional space and shrink to fit into smaller spaces. src: MDN.
Flex model: There is Main axis and Cross axis.

<!-- 104. Flex-direction-->
There are Flex-direction:
1.Row = Change into the row.
2.Reverse-row = The oposite of Row.
3. Column = Change into column.
4. Reverse-Column = The oposite of column.

<!-- 105. Justify-content -->
Justify content work depends the flex-direction. Changing the "main axis".
There are Justify-content:
1.Flex-start: Will move to the start of the main axis.
2.Flex-end: Will move to the ending of the main axis.
3. Space-between: It will give the evenly space "between the elements".
4. Space-around: It will give same amount of space "around the elements".
5. Space-evenly: It will give the same amount of space for "the container and the elements".

<!-- 106. Flex-wrap -->
Sets the flex items to wrap in one line / can be wrapped into multiple lines.

<!-- 107. Align-items -->
Changin the "cross axis".
There are Align-items:
1.Flex-start: Align to the start of the cross axis.
2.Flex-end: Align to the end of the cross axis.
3.Center: Move to the center.
4.Baseline: Aligning to the center of the elements.

<!-- 108. Align-Content & Align-Self-->
Align content is to control the distributed space in the cross axis.
There are Align-Content:
1.Flex-start: Will move to the start of the cross axis.
2.Flex-end: Will move to the ending of the cross axis.
3. Space-between: It will give the evenly space "between the elements".
4. Space-around: It will give same amount of space "around the elements".
5. Space-evenly: It will give the same amount of space for "the container and the elements".

Align-self it to control the cross axis of one spesific elements.